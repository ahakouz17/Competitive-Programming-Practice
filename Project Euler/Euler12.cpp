/*
 * Project Euler #12: Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Answer:
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>
using namespace std;
vector<pair<int, int>> triangle_numbers;

void countFactorsOfTriangleNumbers(){
    int i = 1, factors_count;
    int triangle_num =0;
    while(true){
        triangle_num += i++;
        factors_count = 0; // divdes by itself
        int j = (int) floor(sqrt(triangle_num));

        for( ; j > 0; j--){
                if(triangle_num % j == 0) {
                    if(triangle_num/j == j)factors_count++;
                    else
                    {
                        factors_count+=2;
                    }
                    
                }
        }
        triangle_numbers.push_back(make_pair(triangle_num, factors_count));
        if (factors_count > 1000) break;
    }
    
    //for(int k = 0; k < triangle_numbers.size(); k++){
    //    printf("%d : %d \n", triangle_numbers[k].first, triangle_numbers[k].second);
    //}
    sort(triangle_numbers.begin(), triangle_numbers.end());
    
    //cout << "SORTED!";
}

int SearchForFactorsCount(int lower_limit){
    int index = 0;
    while(triangle_numbers[index].second < lower_limit+1) index++;
    return triangle_numbers[index].first;
}

int main(){
    int t, n;
    scanf("%d", &t);
    countFactorsOfTriangleNumbers();
    while(t--){
        scanf("%d", &n);
        printf("%d\n", SearchForFactorsCount(n));
    }
    return 0;
}
